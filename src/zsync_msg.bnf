The following ABNF grammar defines the the API which is used to comminicate with user interface clients:

    zsync_api   = HELLO
               /= UPDATE
               /= REQ_FILES
               /= (REQ_CHUNK RES_CHUNK)

    ;  Greet a new peer with it's known state.                               

    HELLO           = signature %d1 state
    signature       = %xAA %xA0             ; two octets
    state           = number-8              ; State of the peer we're greeting

    ;  Sends a list of updated files to the client.                          

    UPDATE          = signature %d2 sender update_msg
    sender          = string                ; UUID that identifies the sender
    update_msg      = msg                   ; List of updated files and their metadata

    ;  Requests a list of files from receiver.                               

    FILES           = signature %d3 receiver files size
    receiver        = string                ; UUID that identifies the receiver
    files           = strings               ; List of file names
    size            = number-8              ; Total size of all files in bytes

    ;  Sends a credit amount for requested files.                            

    CREDIT          = signature %d4 amount
    amount          = number-8              ; Credit amount in bytes

    ;  Sends one 'chunk' of data of a file at the 'path'.                    

    CHUNK           = signature %d5 chunk path sequence offset
    chunk           = chunk                 ; This chunk is part of the file at 'path'
    path            = string                ; Path of file that the 'chunk' belongs to 
    sequence        = number-8              ; Defines which chunk of the file at 'path' this is!
    offset          = number-8              ; Offset for this 'chunk' in bytes

    ;  Sends an abort for one file at path.                                  

    ABORT           = signature %d6 receiver path
    receiver        = string                ; UUID that identifies the receiver
    path            = string                ; 

    ; A list of string values
    strings         = strings-count *strings-value
    strings-count   = number-4
    strings-value   = longstr

    ; A chunk has 4-octet length + binary contents
    chunk           = number-4 *OCTET

    ; A msg is zero or more distinct frames
    msg             = *frame

    ; Strings are always length + text contents
    string          = number-1 *VCHAR
    longstr         = number-4 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-4        = 4OCTET
    number-8        = 8OCTET
